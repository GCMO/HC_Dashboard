// The following file targets exclusively the Calendar app. It ensures that there are always autogenerated instances for a span covering 3 months.
// This to ensure that whenever a Therapist choose event_repeat - the calendar automatically will generate Strapi instances for a span of 3 months.

// import { addDays, addWeeks, addMonths, addYears, startOfDay, endOfDay, isBefore, addQuarters } from 'date-fns';

// const generateEventInstances = (event, repeat, startFrom) => {
//   let instances = [];
//   let currentDate = startFrom ? new Date(startFrom) : new Date(event.event_start);

//   console.log('12345', event.event_start)
//   console.log('67890', event.start)

//   switch (repeat.toLowerCase()) {
//     case 'daily':   // Repeat Monday-Friday until 31/12
//       const endDaily = new Date(currentDate.getFullYear(), 11, 31); // 31/12 of the current year
//       while (isBefore(currentDate, endDaily)) {
//         if (currentDate.getDay() >= 1 && currentDate.getDay() <= 5) { // Monday to Friday
//           instances.push(createInstance(event, currentDate));
//         }
//         currentDate = addDays(currentDate, 1);
//       }
//       break;

//     case 'weekly':   // Repeat weekly on the specified day until 31/12
//       const endWeekly = new Date(currentDate.getFullYear(), 11, 31);  
//       while (isBefore(currentDate, endWeekly)) {
//         instances.push(createInstance(event, currentDate));
//         currentDate = addWeeks(currentDate, 1);
//       }
//       break;

//     case 'monthly': // Repeat monthly until 31/12
//       const endMonthly = new Date(currentDate.getFullYear(), 11, 31);  
//       while (isBefore(currentDate, endMonthly)) {
//         instances.push(createInstance(event, currentDate));
//         currentDate = addMonths(currentDate, 1);
//       }
//       break;

//     case 'quarterly': // Repeat quarterly for 2 years
//       const endQuarterly = addYears(currentDate, 2);
//       while (isBefore(currentDate, endQuarterly)) {
//         instances.push(createInstance(event, currentDate));
//         currentDate = addQuarters(currentDate, 1);
//       }
//       break;

//     case 'yearly':    // Repeat yearly for 7 years
//       const endYearly = addYears(currentDate, 7);
//       while (isBefore(currentDate, endYearly)) {
//         instances.push(createInstance(event, currentDate));
//         currentDate = addYears(currentDate, 1);
//       }
//       break;

//     default:
//       break;
//   }

//   return instances;
// };

// const createInstance = (event, date) => {
//   const start = new Date(event.start);
//   const end = new Date(event.end);
//   if (isNaN(start) || isNaN(end)) {
//     throw new Error('Invalid date value');
//   }
//   const newStart = new Date(date);
//   newStart.setHours(start.getHours(), start.getMinutes(), start.getSeconds());
//   const newEnd = new Date(date);
//   newEnd.setHours(end.getHours(), end.getMinutes(), end.getSeconds());

//   return {
//     ...event,
//     start: newStart.toISOString(),
//     end: newEnd.toISOString(),
//   };
// };

// export default generateEventInstances;
